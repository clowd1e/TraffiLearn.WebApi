// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TraffiLearn.Infrastructure.Persistence;

#nullable disable

namespace TraffiLearn.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240709133950_CategoriesFeature")]
    partial class CategoriesFeature
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DrivingCategoryQuestion", b =>
                {
                    b.Property<Guid>("DrivingCategoriesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuestionsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DrivingCategoriesId", "QuestionsId");

                    b.HasIndex("QuestionsId");

                    b.ToTable("DrivingCategoryQuestion");
                });

            modelBuilder.Entity("TraffiLearn.Domain.Entities.DrivingCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("DrivingCategories");
                });

            modelBuilder.Entity("TraffiLearn.Domain.Entities.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CorrectAnswears")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PossibleAnswears")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.ComplexProperty<Dictionary<string, object>>("NumberDetails", "TraffiLearn.Domain.Entities.Question.NumberDetails#QuestionNumberDetails", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("QuestionNumber")
                                .HasColumnType("int");

                            b1.Property<int>("TicketNumber")
                                .HasColumnType("int");
                        });

                    b.HasKey("Id");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("DrivingCategoryQuestion", b =>
                {
                    b.HasOne("TraffiLearn.Domain.Entities.DrivingCategory", null)
                        .WithMany()
                        .HasForeignKey("DrivingCategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TraffiLearn.Domain.Entities.Question", null)
                        .WithMany()
                        .HasForeignKey("QuestionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
